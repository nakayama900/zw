"use strict";(self.webpackChunkzi_wiki_pages=self.webpackChunkzi_wiki_pages||[]).push([[9383],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||l;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},869:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7294),i=n(6775),l="apiTable_e8hp";var r=(0,a.forwardRef)((function(e,t){var n=e.name,l=e.children,r=function(e){for(var t=e;(0,a.isValidElement)(t);)t=a.Children.toArray(t.props.children)[0];return t}(l),o=n?n+"-"+r:r,p="#"+o,s=(0,i.k6)();return a.createElement("tr",{id:o,tabIndex:0,ref:s.location.hash===p?t:void 0,onClick:function(){s.push(p)},onKeyDown:function(e){"Enter"===e.key&&s.push(p)}},l.props.children)}));function o(e){var t=e.children,n=e.name,i=a.Children.toArray(t.props.children),o=i[0],p=i[1],s=(0,a.useRef)(null);(0,a.useEffect)((function(){var e;null==(e=s.current)||e.focus()}),[s]);var d=a.Children.map(p.props.children,(function(e){return a.createElement(r,{name:n,ref:s},e)}));return a.createElement("table",{className:l},o,a.createElement("tbody",null,d))}},4755:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=n(869),o=["components"],p={id:"ice",title:"\ud83e\uddca Ice Syntax",image:"/img/include/ice-239x200.png",description:"Ice syntax documentation",keywords:["ice","syntax","zsh","z-shell","zi"]},s=void 0,d={unversionedId:"guides/ice",id:"guides/ice",title:"\ud83e\uddca Ice Syntax",description:"Ice syntax documentation",source:"@site/docs/guides/02_ice.md",sourceDirName:"guides",slug:"/guides/ice",permalink:"/docs/guides/ice",editUrl:"https://github.com/z-shell/zw/tree/main/docs/guides/02_ice.md",tags:[],version:"current",lastUpdatedBy:"Salvydas Lukosius",lastUpdatedAt:1642153101,formattedLastUpdatedAt:"1/14/2022",sidebarPosition:2,frontMatter:{id:"ice",title:"\ud83e\uddca Ice Syntax",image:"/img/include/ice-239x200.png",description:"Ice syntax documentation",keywords:["ice","syntax","zsh","z-shell","zi"]},sidebar:"tutorialSidebar",previous:{title:"\u270d\ufe0f Syntax",permalink:"/docs/guides/syntax"},next:{title:"\ud83e\uddca Ice Modifiers",permalink:"/docs/guides/ice-modifiers"}},c=[{value:"<code>extract&#39;\u2026&#39;</code>",id:"extract",children:[{value:"The Automatic Archive-Extraction Ice",id:"the-automatic-archive-extraction-ice",children:[{value:"Automatic Mode",id:"automatic-mode",children:[],level:4},{value:"Fixed Mode",id:"fixed-mode",children:[],level:4},{value:"Filenames With Spaces",id:"filenames-with-spaces",children:[],level:4},{value:"Flags",id:"flags",children:[],level:4}],level:3},{value:"<code>ziextract</code>",id:"ziextract",children:[],level:3},{value:"Supported File Formats",id:"supported-file-formats",children:[],level:3}],level:2},{value:"<code>from&#39;\u2026&#39;</code>",id:"from",children:[{value:"Summary of <code>from&#39;\u2026&#39;</code>",id:"summary-of-from",children:[],level:3}],level:2},{value:"<code>id-as&#39;\u2026&#39;</code>",id:"id-as",children:[{value:"Nickname a plugin or snippet",id:"nickname-a-plugin-or-snippet",children:[],level:3},{value:"<code>id-as&#39;auto&#39;</code>",id:"id-asauto",children:[],level:3},{value:"Empty <code>id-as&#39;\u2026&#39;</code>",id:"empty-id-as",children:[],level:3}],level:2},{value:"<code>wait</code>",id:"wait",children:[{value:"<code>zi-turbo &#39;\u2026&#39; for \u2026\u2026</code>",id:"zi-turbo--for",children:[],level:3}],level:2},{value:"<code>wrap-track&#39;\u2026&#39;</code>",id:"wrap-track",children:[{value:"Use case for <code>wrap-track&#39;\u2026&#39;</code>",id:"use-case-for-wrap-track",children:[{value:"Summary of <code>wrap-track&#39;\u2026&#39;</code>",id:"summary-of-wrap-track",children:[],level:4}],level:3}],level:2},{value:"<code>src&#39;\u2026&#39;</code> <code>pick&#39;\u2026&#39;</code> <code>multisrc&#39;\u2026&#39;</code>",id:"src-pick-multisrc",children:[{value:"The <code>multisrc&#39;\u2026&#39;</code> ice",id:"the-multisrc-ice",children:[],level:3}],level:2},{value:"<code>atclone&#39;\u2026&#39;</code> <code>atpull&#39;\u2026&#39;</code> <code>atinit&#39;\u2026&#39;</code> <code>atload&#39;\u2026&#39;</code>",id:"atclone-atpull-atinit-atload",children:[{value:"<code>atload&#39;!\u2026&#39;</code> with exclamation mark preceded",id:"atload-with-exclamation-mark-preceded",children:[],level:3},{value:"Use case for <code>atload&#39;\u2026&#39;</code>",id:"use-case-for-atload",children:[],level:3},{value:"Practical example",id:"practical-example",children:[],level:3}],level:2}],m={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{align:"right"},(0,l.kt)("img",{src:"/img/include/ice-239x200.png",alt:"ice",width:"239",height:"200"})),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"F&A: What is ice?")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The word ",(0,l.kt)("strong",{parentName:"p"},"ice")," means something that's added (like ice to a drink) \u2013 and in ZI syntax it means adding a modifier to a next zi command, and also something that's temporary because it melts \u2013 and this means that the modification will last only for a single next zi command."))),(0,l.kt)("h2",{id:"extract"},(0,l.kt)("inlineCode",{parentName:"h2"},"extract'\u2026'")),(0,l.kt)("h3",{id:"the-automatic-archive-extraction-ice"},"The Automatic Archive-Extraction Ice"),(0,l.kt)("p",null,"ZI has a swiss-knife tool for unpacking all kinds of archives \u2013 the ",(0,l.kt)("inlineCode",{parentName:"p"},"extract'\u2026'")," ice. It works in two modes \u2013 automatic mode and fixed mode."),(0,l.kt)("h4",{id:"automatic-mode"},"Automatic Mode"),(0,l.kt)("p",null,"It is active if the ice is empty (or contains only flags \u2013 more on them later). It works as follows:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"At first, a recursive search for files of known ",(0,l.kt)("a",{parentName:"li",href:"#supported-file-formats"},"file extensions")," located not deeper than in a sub-directory is being performed. All such found files are then extracted.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The directory-level limit is to skip extraction of some helper archive files, which are typically located somewhere deeper in the directory tree."))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"IF")," no such files will be found, then a recursive search for files of known archive ",(0,l.kt)("strong",{parentName:"li"},"types")," will be performed. This is basically done by running the ",(0,l.kt)("inlineCode",{parentName:"li"},"file")," Unix command on each file in the plugin or snippet directory and then grepping the output for strings like ",(0,l.kt)("inlineCode",{parentName:"li"},"Zip"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"bzip2"),", etc. All such discovered files are then extracted.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The directory-level requirement is imposed also during this stage - files located deeper in the tree than in a sub-directory are omitted."))),(0,l.kt)("li",{parentName:"ol"},"If no archive files will be discovered then no action is being performed and also no warning message is being printed.")),(0,l.kt)("h4",{id:"fixed-mode"},"Fixed Mode"),(0,l.kt)("p",null,"It is active when a filename is being passed as the ",(0,l.kt)("inlineCode",{parentName:"p"},"extract"),"'s argument, e.g.: ",(0,l.kt)("inlineCode",{parentName:"p"},"zi extract=archive.zip for z-shell/null"),". Multiple files can be specified \u2013 separated by spaces. In this mode all and only the specified files are being extracted."),(0,l.kt)("h4",{id:"filenames-with-spaces"},"Filenames With Spaces"),(0,l.kt)("p",null,"The filenames with spaces in them are supported by a trick \u2013 to correctly pass such a filename to ",(0,l.kt)("inlineCode",{parentName:"p"},"extract")," use the non-breaking space in place of the in-filename original spaces. The non-breaking space is easy to type by pressing right Alt and the Space."),(0,l.kt)("h4",{id:"flags"},"Flags"),(0,l.kt)("p",null,"The value of the ice can begin with a two special characters:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Exclamation mark (",(0,l.kt)("inlineCode",{parentName:"li"},"!"),"), i.e.: ",(0,l.kt)("inlineCode",{parentName:"li"},"extract='!\u2026'")," \u2013 it'll cause the files to be moved one directory-level up upon unpacking,"),(0,l.kt)("li",{parentName:"ol"},"Dash (",(0,l.kt)("inlineCode",{parentName:"li"},"-"),"), i.e.: ",(0,l.kt)("inlineCode",{parentName:"li"},"extract'-\u2026'")," \u2013 it'll prevent removal of the archive after unpacking.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"This flag is useful to allow comparing timestamps with the server in case of snippet-downloaded file \u2013 it will prevent unnecessary downloads during ",(0,l.kt)("inlineCode",{parentName:"li"},"zi update"),", as the timestamp of the archive file on the disk will be first compared with the HTTP last-modification time header.")))),(0,l.kt)("p",null,"The flags can be combined in any order, e.g: ",(0,l.kt)("inlineCode",{parentName:"p"},"extract'!-'"),"."),(0,l.kt)("h3",{id:"ziextract"},(0,l.kt)("inlineCode",{parentName:"h3"},"ziextract")),(0,l.kt)("p",null,"Sometimes a more uncommon unpacking operation is needed. In such case you can directly use the function that implements the ice \u2013 it is called ",(0,l.kt)("inlineCode",{parentName:"p"},"ziextract"),"."),(0,l.kt)("p",null,"It recognizes the following options:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"--auto")," \u2013 runs the automatic extraction."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"--move")," \u2013 performs the one-directory-level-up move of the files after unpacking."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"--norm")," - prevents the archive file removal."),(0,l.kt)("li",{parentName:"ol"},"And also one option specific only to the function: ",(0,l.kt)("inlineCode",{parentName:"li"},"--nobkp"),", which prevents clearing of the plugin's dir before the extraction \u2013 normally all the files except the archive are being moved into ",(0,l.kt)("inlineCode",{parentName:"li"},"._backup")," directory and after that the extraction is performed. - ",(0,l.kt)("inlineCode",{parentName:"li"},"extract")," ice also skips creating the backup ",(0,l.kt)("strong",{parentName:"li"},"if")," more than one archive is found or given as the argument.")),(0,l.kt)("h3",{id:"supported-file-formats"},"Supported File Formats"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Zip,"),(0,l.kt)("li",{parentName:"ul"},"RAR,"),(0,l.kt)("li",{parentName:"ul"},"tar.gz,"),(0,l.kt)("li",{parentName:"ul"},"tar.bz2,"),(0,l.kt)("li",{parentName:"ul"},"tar.xz,"),(0,l.kt)("li",{parentName:"ul"},"tar.7z,"),(0,l.kt)("li",{parentName:"ul"},"tar,"),(0,l.kt)("li",{parentName:"ul"},"gz,"),(0,l.kt)("li",{parentName:"ul"},"bz2,"),(0,l.kt)("li",{parentName:"ul"},"xz,"),(0,l.kt)("li",{parentName:"ul"},"7z,"),(0,l.kt)("li",{parentName:"ul"},"deb ",(0,l.kt)("strong",{parentName:"li"},"debian packages"),","),(0,l.kt)("li",{parentName:"ul"},"OS X ",(0,l.kt)("strong",{parentName:"li"},"dmg images"),".")),(0,l.kt)("h2",{id:"from"},(0,l.kt)("inlineCode",{parentName:"h2"},"from'\u2026'")),(0,l.kt)("p",null,"In order to install and load a plugin whose repository is private - e.g: requires providing credentials in order to log in \u2013 use the ",(0,l.kt)("inlineCode",{parentName:"p"},"from'\u2026'")," ice in the following way:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice from"user@github.com"\nzi load user/fsh-auto-themes\n')),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"from'\u2026'")," ice isn't one of ",(0,l.kt)("inlineCode",{parentName:"p"},"gh"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"github"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gl"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gitlab"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"bb"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"bitbucket"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"nb"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"notabug"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gh-r"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"github-rel")," then ",(0,l.kt)("strong",{parentName:"p"},"it is treaten as a domain name")," and inserted into the domain position into the ",(0,l.kt)("inlineCode",{parentName:"p"},"git clone")," url:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://{from-ice-contents}/user/plugin\n")))),(0,l.kt)("p",null,"In order to change the protocol, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"proto'\u2026'")," ice."),(0,l.kt)("h3",{id:"summary-of-from"},"Summary of ",(0,l.kt)("inlineCode",{parentName:"h3"},"from'\u2026'")),(0,l.kt)("p",null,"By using this method you can clone plugins from e.g. GitHub Enterprise or embed the passwords as plain text in ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),"."),(0,l.kt)("h2",{id:"id-as"},(0,l.kt)("inlineCode",{parentName:"h2"},"id-as'\u2026'")),(0,l.kt)("h3",{id:"nickname-a-plugin-or-snippet"},"Nickname a plugin or snippet"),(0,l.kt)("p",null,"Zi supports loading a plugin or snippet with a nickname. Set the nickname through the ",(0,l.kt)("inlineCode",{parentName:"p"},"id-as")," ice-mod. For example, one could try to load ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/docker/compose"},(0,l.kt)("strong",{parentName:"a"},"docker/compose"))," from GitHub binary releases:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice as"program" from"gh-r" mv"docker-c* -> docker-compose"\nzi light "docker/compose"\n')),(0,l.kt)("p",null,"This registers plugin under the ID ",(0,l.kt)("inlineCode",{parentName:"p"},"docker/compose"),". Now suppose the user would want to also load a completion from the project's GitHub repository (not the binary release catalog) which is also available under the GitHub url-path ",(0,l.kt)("strong",{parentName:"p"},"\u2026/docker/compose"),'. The two IDs, both being "docker/compose", will collide.'),(0,l.kt)("p",null,"The solution to this problem \u2013 the ",(0,l.kt)("inlineCode",{parentName:"p"},"id-as")," (to be read as: ",(0,l.kt)("em",{parentName:"p"},"identify-as"),") ice to which this document is devoted: by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"id-as")," ice the user can resolve the conflict by loading the completion under a kind of a ",(0,l.kt)("em",{parentName:"p"},"nickname"),', for example under "',(0,l.kt)("em",{parentName:"p"},"dc-complete"),'", by issuing the following commands:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice as"completion" id-as"dc-complete"\nzi load docker/compose\n')),(0,l.kt)("p",null,"The plugin (of the type ",(0,l.kt)("inlineCode",{parentName:"p"},"completion"),") is now seen under ID ",(0,l.kt)("inlineCode",{parentName:"p"},"dc-complete"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi list | grep -i dc-complete\ndc-complete\n")),(0,l.kt)("p",null,"Issuing ",(0,l.kt)("inlineCode",{parentName:"p"},"zi report dc-complete")," also works, so as other Zi commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi report dc-complete\n\nPlugin report for dc-complete\n-------------------------------\n\nCompletions:\n_docker-compose [enabled]\n")),(0,l.kt)("p",null,"This can be also used to nickname snippets. For example, you can use this to create handy IDs in place of long urls:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice as"program" id-as"git-unique"\nzi snippet https://github.com/Osse/git-scripts/blob/master/git-unique\n')),(0,l.kt)("p",null,"The commands ",(0,l.kt)("inlineCode",{parentName:"p"},"zi update git-unique"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"zi delete git-unique")," and other will work normally and e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"zi times")," will show the ",(0,l.kt)("em",{parentName:"p"},"nickname"),"-ID ",(0,l.kt)("inlineCode",{parentName:"p"},"git-unique")," instead of the long URL."),(0,l.kt)("h3",{id:"id-asauto"},(0,l.kt)("inlineCode",{parentName:"h3"},"id-as'auto'")),(0,l.kt)("p",null,"There's a special value to the ",(0,l.kt)("inlineCode",{parentName:"p"},"id-as'\u2026'")," ice \u2013 ",(0,l.kt)("inlineCode",{parentName:"p"},"auto"),". It causes the nickname to be automatically set to the last component of the plugin name or snippet URL. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice as"program" id-as"auto"\nzi snippet https://github.com/Osse/git-scripts/blob/master/git-unique\n')),(0,l.kt)("p",null,"will work the same as before, e.g: like if the ice used was ",(0,l.kt)("inlineCode",{parentName:"p"},"id-as'git-unique'"),". Example with a plugin:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Will work as if id-as'zsh-autopair' was passed\nzi ice wait lucid id-as\"auto\"\nzi load hlissner/zsh-autopair\n")),(0,l.kt)("h3",{id:"empty-id-as"},"Empty ",(0,l.kt)("inlineCode",{parentName:"h3"},"id-as'\u2026'")),(0,l.kt)("p",null,"An empty ",(0,l.kt)("inlineCode",{parentName:"p"},"id-as'\u2026'")," will work the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"id-as'auto'"),", i.e.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Will work as if id-as'zsh-autopair' was passed\nzi ice wait lucid id-as\nzi load hlissner/zsh-autopair\n")),(0,l.kt)("h2",{id:"wait"},(0,l.kt)("inlineCode",{parentName:"h2"},"wait")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Turbo mode, i.e. the ",(0,l.kt)("inlineCode",{parentName:"p"},"wait")," ice that implements it - needs Zsh >= 5.3."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi ice wait'0' # or just: zi ice wait\nzi light wfxr/forgit\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"waits for prompt,"),(0,l.kt)("li",{parentName:"ul"},'instantly ("0" seconds) after prompt loads given plugin.')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi ice wait'[[ -n ${ZLAST_COMMANDS[(r)cras*]} ]]'\nzi light z-shell/zi-crasis\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$ZLAST_COMMANDS")," is an array build by ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/z-shell/F-Sy-H"},(0,l.kt)("strong",{parentName:"a"},"F-Sy-H")),", it contains commands currently entered at prompt,"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"(r)")," searches for element that matches given pattern (",(0,l.kt)("inlineCode",{parentName:"li"},"cras*"),") and returns it,"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-n"),' means: not-empty, so it will be true when users enters "cras",'),(0,l.kt)("li",{parentName:"ul"},"after 1 second or less, ZI will detect that ",(0,l.kt)("inlineCode",{parentName:"li"},"wait'\u2026'")," condition is true, and load the plugin, which provides command ",(0,l.kt)("em",{parentName:"li"},"crasis"),","),(0,l.kt)("li",{parentName:"ul"},"Screencast that presents the feature: ",(0,l.kt)("a",{parentName:"li",href:"https://asciinema.org/a/149725"},(0,l.kt)("img",{parentName:"a",src:"https://asciinema.org/a/149725.svg",alt:"screencast"})))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi ice wait'[[ $PWD = */github || $PWD = */github/* ]]'\nzi load unixorn/git-extra-commands\n")),(0,l.kt)("p",null,"it waits until user enters a ",(0,l.kt)("inlineCode",{parentName:"p"},"github")," directory."),(0,l.kt)("p",null,"Turbo mode also support a suffix \u2013 the letter ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"b")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"c"),". The meaning is illustrated by the following example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice wait"0b" as"command" pick"wd.sh" atinit"echo Firing 1" lucid\nzi light mfaerevaag/wd\nzi ice wait"0a" as"command" pick"wd.sh" atinit"echo Firing 2" lucid\nzi light mfaerevaag/wd\n\n# The output\nFiring 2\nFiring 1\n')),(0,l.kt)("p",null,"As it can be seen, the second plugin has been loaded first. That's because there are now three sub-slots (the ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"b")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"c"),") in which the plugin/snippet loadings can be put into. Plugins from the same time-slot with suffix ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," will be loaded before plugins with suffix ",(0,l.kt)("inlineCode",{parentName:"p"},"b"),", etc."),(0,l.kt)("p",null,"In other words, instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"wait'1'")," you can enter ",(0,l.kt)("inlineCode",{parentName:"p"},"wait'1a'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wait'1b'")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"wait'1c'")," \u2013 to this way ",(0,l.kt)("strong",{parentName:"p"},"impose order")," on the loadings ",(0,l.kt)("strong",{parentName:"p"},"regardless of the order of ",(0,l.kt)("inlineCode",{parentName:"strong"},"zi")," commands"),"."),(0,l.kt)("h3",{id:"zi-turbo--for"},(0,l.kt)("inlineCode",{parentName:"h3"},"zi-turbo '\u2026' for \u2026\u2026")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"zi-turbo")," is a funtion to simplify ",(0,l.kt)("inlineCode",{parentName:"p"},"wait"),". This is how the function looks like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi-turbo () {\n   zi depth\'3\' lucid ${1/#[0-9][a-d]/wait"${1}"} "${@:2}"\n}\n')),(0,l.kt)("p",null,"It can be executed with the ",(0,l.kt)("inlineCode",{parentName:"p"},"for")," syntax in the imposed loading order e.g:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi-turbo '0a' for \\\n   OMZL::git.zsh \\\n   OMZL::compfix.zsh \\\n   OMZL::functions.zsh \\\n\nzi-turbo '0b' for \\\n   OMZL::prompt_info_functions.zsh OMZL::spectrum.zsh \\\n   OMZL::clipboard.zsh OMZL::termsupport.zsh OMZL::directories.zsh\n\nzi-turbo '1a' for \\\n   OMZP::sudo OMZP::encode64 \\\n      atload\"unalias grv g\" OMZP::git \\\n   OMZP::gcloud OMZP::nvm OMZP::gem OMZP::rust\n\nzi-turbo '1b' for \\\n   MichaelAquilina/zsh-you-should-use\n")),(0,l.kt)("h2",{id:"wrap-track"},(0,l.kt)("inlineCode",{parentName:"h2"},"wrap-track'\u2026'")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"wrap-track'\u2026'")," ice-mod allows to extend the tracking (e.g: gathering of report and unload data) of a plugin beyond the moment of sourcing it's main file(s). It works by wrapping the given functions with a tracking-enabling and disabling snippet of code. This is useful especially with prompts, as they very often do their initialization in the first call to their ",(0,l.kt)("inlineCode",{parentName:"p"},"precmd")," ",(0,l.kt)("a",{parentName:"p",href:"http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions"},(0,l.kt)("strong",{parentName:"a"},"hook"))," function. For example, ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/romkatv/powerlevel10k"},(0,l.kt)("strong",{parentName:"a"},"romkatv/powerlevel10k"))," works this way."),(0,l.kt)("p",null,"The ice takes a list of function names, with the elements separated by ",(0,l.kt)("inlineCode",{parentName:"p"},";"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice wrap-track"func1;func2;\u2026" \u2026\n\u2026\n')),(0,l.kt)("h3",{id:"use-case-for-wrap-track"},"Use case for ",(0,l.kt)("inlineCode",{parentName:"h3"},"wrap-track'\u2026'")),(0,l.kt)("p",null,"Therefore, to e.g. load and unload the example powerlevel10k prompt in the fashion of ",(0,l.kt)("a",{parentName:"p",href:"../guides/customization#multiple-prompts"},(0,l.kt)("strong",{parentName:"a"},"Multiple prompts"))," article, the ",(0,l.kt)("inlineCode",{parentName:"p"},"precmd")," function of the plugin \u2013 called ",(0,l.kt)("inlineCode",{parentName:"p"},"_p9k_precmd")," (to get the name of the function do ",(0,l.kt)("inlineCode",{parentName:"p"},"echo $precmd_functions")," after loading a theme) \u2013 should be passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"wrap-track'\u2026'")," ice, like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Load when MYPROMPT == 4\nzi ice load'![[ $MYPROMPT = 4 ]]' unload'![[ $MYPROMPT != 4 ]]' \\\n  atload'source ~/.p10k.zsh; _p9k_precmd' wrap-track'_p9k_precmd'\nzi load romkatv/powerlevel10k\n")),(0,l.kt)("p",null,"This way the actions done during the first call to ",(0,l.kt)("inlineCode",{parentName:"p"},"_p9k_precmd()")," will be normally recorded, which can be viewed in the report of the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/romkatv/powerlevel10k"},(0,l.kt)("strong",{parentName:"a"},"romkatv/powerlevel10k"))," theme:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"\u279c zi report romkatv/powerlevel10k:\nReport for romkatv/powerlevel10k plugin\n---------------------------------------\nSource powerlevel10k.zsh-theme (reporting enabled)\nAutoload is-at-least with options -U -z\n\n(\u2026)\n\nNote: === Starting to track function: _p9k_precmd ===\nZle -N p9k-orig-zle-line-finish _zsh_highlight_widget_zle-line-finish\nNote: a new widget created via zle -N: p9k-orig-zle-line-finish\nZle -N -- zle-line-finish _p9k_wrapper__p9k_zle_line_finish\nAutoload vcs_info with options -U -z\nZstyle :vcs_info:* check-for-changes true\n\n(\u2026)\n\nZstyle :vcs_info:* get-revision false\nAutoload add-zsh-hook with options -U -z\nZle -F 22_gitstatus_process_response_POWERLEVEL9K\nAutoload_gitstatus_cleanup_15877_0_16212\nZle -N -- zle-line-pre-redraw _p9k_wrapper__p9k_zle_line_pre_redraw\nNote: a new widget created via zle -N: zle-line-pre-redraw\nZle -N -- zle-keymap-select _p9k_wrapper__p9k_zle_keymap_select\nNote: === Ended tracking function:_p9k_precmd ===\n\nFunctions created:\n+vi-git-aheadbehind                      +vi-git-remotebranch\n\n(\u2026)\n")),(0,l.kt)("h4",{id:"summary-of-wrap-track"},"Summary of ",(0,l.kt)("inlineCode",{parentName:"h4"},"wrap-track'\u2026'")),(0,l.kt)("p",null,"As it can be seen, creation of four additional Zle-widgets has been recorded (the ",(0,l.kt)("inlineCode",{parentName:"p"},"Zle -N \u2026")," lines). They will be properly deleted/restored on the plugin unload with ",(0,l.kt)("inlineCode",{parentName:"p"},"MYPROMPT=3")," (for example) and the shell state will be clean, ready to load a new prompt."),(0,l.kt)("h2",{id:"src-pick-multisrc"},(0,l.kt)("inlineCode",{parentName:"h2"},"src'\u2026'")," ",(0,l.kt)("inlineCode",{parentName:"h2"},"pick'\u2026'")," ",(0,l.kt)("inlineCode",{parentName:"h2"},"multisrc'\u2026'")),(0,l.kt)("p",null,"Normally ",(0,l.kt)("inlineCode",{parentName:"p"},"src'\u2026'")," can be used to specify additional file to source:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice pick"powerless.zsh" src"utilities.zsh"\nzi light martinrotter/powerless\n')),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"pick'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Provide main file to source (can be a pattern like ",(0,l.kt)("inlineCode",{parentName:"td"},"*.sh")," \u2013 alphabetically first matched file is sourced).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"src'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Provide second file to source (not a pattern, plain file name)."))))),(0,l.kt)("p",null,"However, via ",(0,l.kt)("inlineCode",{parentName:"p"},"atload'\u2026'")," ice one can provide simple loop to source more files:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi ice svn pick\"completion.zsh\" \\\n  atload'local f; for f in git.zsh misc.zsh; do \\\n        source $f \\\n    done'\nzi snippet OMZ::lib\n")),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"svn")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use Subversion to clone ",(0,l.kt)("inlineCode",{parentName:"td"},"OMZ::lib")," (the whole Oh My Zsh ",(0,l.kt)("inlineCode",{parentName:"td"},"lib/")," directory), note that ",(0,l.kt)("inlineCode",{parentName:"td"},"atload'\u2026'")," uses apostrophes not double quotes, to literally put ",(0,l.kt)("inlineCode",{parentName:"td"},"$f")," into the string, ",(0,l.kt)("inlineCode",{parentName:"td"},"atload"),"'s code is automatically being run ",(0,l.kt)("strong",{parentName:"td"},"within the snippet's (or plugin's) directory"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"atload'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Code isn't tracked by ZI, e.g: cannot be unloaded, unless you load a plugin (not a snippet) with ",(0,l.kt)("inlineCode",{parentName:"td"},"zi load \u2026\u2026")," and prepend the value of the ice with exclamation mark, e.g: ",(0,l.kt)("inlineCode",{parentName:"td"},"atload'!local f; for \u2026\u2026'"),". The ",(0,l.kt)("inlineCode",{parentName:"td"},"atload'\u2026'")," is executed after loading main files (",(0,l.kt)("inlineCode",{parentName:"td"},"pick'\u2026'")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"src'\u2026'")," ones)."))))),(0,l.kt)("h3",{id:"the-multisrc-ice"},"The ",(0,l.kt)("inlineCode",{parentName:"h3"},"multisrc'\u2026'")," ice"),(0,l.kt)("p",null,"Loads ",(0,l.kt)("strong",{parentName:"p"},"multiple")," files enumerated with spaces as the separator (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"multisrc'misc.zsh grep.zsh'"),") and also using brace-expansion syntax (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"multisrc'{misc,grep}.zsh')"),". Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi ice svn pick\"completion.zsh\" multisrc'git.zsh \\\n    functions.zsh {history,grep}.zsh'\nzi snippet OMZ::lib\n")),(0,l.kt)("p",null,"The all possible ways to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"multisrc'\u2026'")," ice-mod:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi ice depth"1" multisrc="lib/{functions,misc}.zsh" pick"/dev/null"\nzi load robbyrussell/oh-my-zsh\n\n# Can use patterns\nzi ice svn multisrc"{funct*,misc}.zsh" pick"/dev/null"\nzi snippet OMZ::lib\n\narray=({functions,misc}.zsh)\nzi ice svn multisrc"$array" pick"/dev/null"\nzi snippet OMZ::lib\n\n# Will use the array\'s value at the moment of plugin load\n# \u2013 this can matter in case of using Turbo mode\narray=({functions,misc}.zsh)\nzi ice svn multisrc"\\$array" pick"/dev/null"\nzi snippet OMZ::lib\n\n# Compatible with KSH_ARRAYS option\narray=({functions,misc}.zsh)\nzi ice svn multisrc"${array[*]}" pick"/dev/null"\nzi snippet OMZ::lib\n\n# Compatible with KSH_ARRAYS option\narray=({functions,misc}.zsh)\nzi ice svn multisrc"\\${array[*]}" pick"/dev/null"\nzi snippet OMZ::lib\n\nzi ice svn multisrc"misc.zsh functions.zsh" pick"/dev/null"\nzi snippet OMZ::lib\n\n# Also \u2013 hack ZI: the ice\'s contents is simply `eval\'-uated\n# like follows: eval "reply=($multisrc)". So it might get handy on\n# an occasion to pass code there, but first you must close the paren\n# and then don\'t forget to assign `reply\', and to provide a trailing\n# opening paren. In the code be careful to not redefine any variable\n# used internally by ZI \u2013 e.g.: `i\' is safe:\n\narray=({functions,misc}.zsh)\nzi ice svn multisrc\'); local i; for i in $array; do \\\n            reply+=( ${i/.zsh/.sh} ); \\\n        done; ((1)\' pick"/dev/null"\nzi snippet OMZ::lib\n')),(0,l.kt)("p",null,"Extended with the ",(0,l.kt)("a",{parentName:"p",href:"syntax#the-for-syntax"},(0,l.kt)("inlineCode",{parentName:"a"},"for"))," syntax which can in some situations replace a typical ",(0,l.kt)("inlineCode",{parentName:"p"},"multisrc'\u2026'")," loading. The point is that this syntax allows to easily specify snippets to source \u2013 and do this within a single ZI command. Thus, instead of:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi ice multisrc'(functions|misc|completion).zsh'\nzi snippet OMZ::lib\n")),(0,l.kt)("p",null,"it's possible to write:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi for \\\n  OMZL::functions.zsh \\\n  OMZL::misc.zsh \\\n  OMZL::completion.zsh\n")),(0,l.kt)("p",null,"which is somewhat easier on eyes. Also \u2013 an ",(0,l.kt)("strong",{parentName:"p"},"important")," property: the multiple snippets loaded with the for-syntax are being loaded ",(0,l.kt)("em",{parentName:"p"},"separately"),", which means that they will not cause a longer keyboard blockage, which could have been noticeable \u2013 when using Turbo. The ZI scheduler will distribute the work over time and will allow activation of keyboard in between the snippets. The ",(0,l.kt)("inlineCode",{parentName:"p"},"multisrc'\u2026'")," way doesn't work this way \u2013 sourcing many files can cause noticeable keyboard freezes (in Turbo)."),(0,l.kt)("h2",{id:"atclone-atpull-atinit-atload"},(0,l.kt)("inlineCode",{parentName:"h2"},"atclone'\u2026'")," ",(0,l.kt)("inlineCode",{parentName:"h2"},"atpull'\u2026'")," ",(0,l.kt)("inlineCode",{parentName:"h2"},"atinit'\u2026'")," ",(0,l.kt)("inlineCode",{parentName:"h2"},"atload'\u2026'")),(0,l.kt)("p",null,"There are four code-receiving ices: ",(0,l.kt)("inlineCode",{parentName:"p"},"atclone'\u2026'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atpull'\u2026'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atinit'\u2026'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atload'\u2026'"),". Their role is to ",(0,l.kt)("strong",{parentName:"p"},"receive a portion of Zsh code and execute it in certain moments of the plugin life-cycle"),"."),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Execution moment"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"atclone'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"after cloning")," the associated plugin or snippet to the disk.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"atpull'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"after updating")," the associated plugin or snippet.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"atinit'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"before loading")," of the associated plugin or snippet.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"center"},(0,l.kt)("inlineCode",{parentName:"td"},"atload'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"after loading")," of the associated plugin or snippet."))))),(0,l.kt)("p",null,"For convenience, you can use each of the ices multiple times in single ",(0,l.kt)("inlineCode",{parentName:"p"},"zi ice \u2026\u2026")," invocation \u2013\xa0all the passed commands will be executed in the given order."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"atpull'\u2026'")," ice recognizes a special value: ",(0,l.kt)("inlineCode",{parentName:"p"},"%atclone")," (so the code looks i.e.: ",(0,l.kt)("inlineCode",{parentName:"p"},"atpull'%atclone'"),"). It causes the contents of the ",(0,l.kt)("inlineCode",{parentName:"p"},"atclone'\u2026'")," ice to be copied into the contents of the ",(0,l.kt)("inlineCode",{parentName:"p"},"atpull")," ice. This is handy when the same tasks have to be performed on clone ",(0,l.kt)("strong",{parentName:"p"},"and")," on update of plugin or snippet, like e.g.: in the ",(0,l.kt)("a",{parentName:"p",href:"../gallery/collection#direnv"},(0,l.kt)("strong",{parentName:"a"},"Direnv example")),"."),(0,l.kt)("h3",{id:"atload-with-exclamation-mark-preceded"},(0,l.kt)("inlineCode",{parentName:"h3"},"atload'!\u2026'")," with exclamation mark preceded"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"wrap-track")," ice allows to track and unload plugins that defer their initialization into a function run later after sourcing the plugin's script \u2013 when the function is called, the plugin is then being fully initialized. However, if the function is being called from the ",(0,l.kt)("inlineCode",{parentName:"p"},"atload")," ice, then there is a simpler method than the ",(0,l.kt)("inlineCode",{parentName:"p"},"wrap-track")," ice \u2013 an ",(0,l.kt)("em",{parentName:"p"},"exclamation mark"),"-preceded ",(0,l.kt)("inlineCode",{parentName:"p"},"atload")," contents. The exclamation mark causes the effects of the execution of the code passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"atload")," ice to be recorded."),(0,l.kt)("h3",{id:"use-case-for-atload"},"Use case for ",(0,l.kt)("inlineCode",{parentName:"h3"},"atload'\u2026'")),(0,l.kt)("p",null,"For example, in the following invocation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi ice id-as'test' atload'!PATH+=:~/share'\nzi load z-shell/null\n")),(0,l.kt)("p",null,"the ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH")," is being changed within ",(0,l.kt)("inlineCode",{parentName:"p"},"atload")," ice. ZI's tracking records ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH")," changes and withdraws them on plugin unload, and also shows information loading:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"\u279c zi report test\nReport for test plugin\n----------------------\nSource  (reporting enabled)\n\nPATH elements added:\n/home/sg/share\n")),(0,l.kt)("p",null,"As it can be seen, the ",(0,l.kt)("inlineCode",{parentName:"p"},"atload")," code is being correctly tracked and can be unloaded & viewed. Below is the result of using the ",(0,l.kt)("inlineCode",{parentName:"p"},"unload")," subcommand to unload the ",(0,l.kt)("inlineCode",{parentName:"p"},"test")," plugin:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi unload test\n--- Unloading plugin: test ---\nRemoving PATH element /home/sg/share\nUnregistering plugin test\nPlugin report saved to $LASTREPORT\n")),(0,l.kt)("h3",{id:"practical-example"},"Practical example"),(0,l.kt)("p",null,"The same example as in the ",(0,l.kt)("a",{parentName:"p",href:"#wrap-track"},(0,l.kt)("strong",{parentName:"a"},"Tracking precmd-based Plugins"))," article, but using the ",(0,l.kt)("em",{parentName:"p"},"exclamation mark"),"-preceded ",(0,l.kt)("inlineCode",{parentName:"p"},"atload")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"wrap-track"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Load when MYPROMPT == 4\nzi ice load'![[ $MYPROMPT = 4 ]]' unload'![[ $MYPROMPT != 4 ]]' \\\n  atload'!source ~/.p10k.zsh; _p9k_precmd'\nzi load romkatv/powerlevel10k\n")))}u.isMDXComponent=!0}}]);