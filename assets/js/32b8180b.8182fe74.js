"use strict";(self.webpackChunkzi_wiki_pages=self.webpackChunkzi_wiki_pages||[]).push([[1922],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7534:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={id:"benchmark",title:"Statistics & Benchmark",image:"/img/logo.png",description:"Benchamarking and profiling for Z-Shell ZI",keywords:["statistics","benchmark","zsh","z-shell","zi"]},s=void 0,p={unversionedId:"guides/benchmark",id:"guides/benchmark",title:"Statistics & Benchmark",description:"Benchamarking and profiling for Z-Shell ZI",source:"@site/docs/guides/06_benchmark.md",sourceDirName:"guides",slug:"/guides/benchmark",permalink:"/docs/guides/benchmark",editUrl:"https://github.com/z-shell/zw/tree/main/docs/guides/06_benchmark.md",tags:[],version:"current",lastUpdatedBy:"Salvydas Lukosius",lastUpdatedAt:1642151914,formattedLastUpdatedAt:"1/14/2022",sidebarPosition:6,frontMatter:{id:"benchmark",title:"Statistics & Benchmark",image:"/img/logo.png",description:"Benchamarking and profiling for Z-Shell ZI",keywords:["statistics","benchmark","zsh","z-shell","zi"]},sidebar:"tutorialSidebar",previous:{title:"Preferences & Customization",permalink:"/docs/guides/customization"},next:{title:"\ud83d\udd3a Collection Guide",permalink:"/docs/gallery/collection"}},c=[{value:"Profile plugins",id:"profile-plugins",children:[],level:2},{value:"Profile <code>.zshrc</code> startup",id:"profile-zshrc-startup",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"profile-plugins"},"Profile plugins"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title=~/.zshrc",title:"~/.zshrc"},"zi ice atinit'zmodload zsh/zprof' \\\n  atload'zprof | head -n 20; zmodload -u zsh/zprof'\nzi light z-shell/F-Sy-H\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"atinit'\u2026'")),(0,a.kt)("td",{parentName:"tr",align:"left"},"loads ",(0,a.kt)("inlineCode",{parentName:"td"},"zsh/zprof")," module (shipped with Zsh) before loading the plugin \u2013 this starts the profiling.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"atload'\u2026'")),(0,a.kt)("td",{parentName:"tr",align:"left"},"works after loading the plugin \u2013\xa0shows profiling results (",(0,a.kt)("inlineCode",{parentName:"td"},"zprof / head"),"), unloads ",(0,a.kt)("inlineCode",{parentName:"td"},"zsh/zprof")," - this stops the profiling.")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"While in effect, only a single plugin (in this case ",(0,a.kt)("inlineCode",{parentName:"p"},"z-shell/F-Sy-H"),") will be profiled. The rest plugins will go on completely normally, as when plugins are loaded with ",(0,a.kt)("inlineCode",{parentName:"p"},"light")," - reporting is disabled. Less code is being run in the background \u2013 (i.e. the automatic data gathering, during loading of a plugin, for the reports and the possibility to unload the plugin) will be activated and the functions will not appear in the ",(0,a.kt)("inlineCode",{parentName:"p"},"zprof")," report.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Example ",(0,a.kt)("inlineCode",{parentName:"p"},"zprof")," report:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"num calls    time                self                 name\n---------------------------------------------------------------------------\n 1)  1 57,76 57,76 57,91%  57,76 57,76 57,91% _zsh_highlight_bind_widgets\n 2)  1 25,81 25,81 25,88%  25,81 25,81 25,88% compinit\n 3)  4 10,71  2,68 10,74%   8,71  2,18  8,73% --zi-shadow-autoload\n 4) 43  2,06  0,05  2,07%   2,06  0,05  2,07% -zi-add-report\n 5)  8  1,98  0,25  1,98%   1,98  0,25  1,98% compdef\n 6)  1  2,85  2,85  2,85%   0,87  0,87  0,87% -zi-compdef-replay\n 7)  1  0,68  0,68  0,68%   0,68  0,68  0,68% -zi-shadow-off\n 8)  1  0,79  0,79  0,79%   0,49  0,49  0,49% add-zsh-hook\n 9)  1  0,47  0,47  0,47%   0,47  0,47  0,47% -zi-shadow-on\n1)   3  0,34  0,11  0,35%   0,34  0,11  0,35% (anon)\n2)   4 10,91  2,73 10,94%   0,20  0,05  0,20% autoload\n3)   1  0,19  0,19  0,19%   0,19  0,19  0,19% -fast-highlight-fill-option-variables\n4)   1 25,98 25,98 26,05%   0,17  0,17  0,17% zpcompinit\n5)   1  2,88  2,88  2,89%   0,03  0,03  0,03% zpcdreplay\n6)   1  0,00  0,00  0,00%   0,00  0,00  0,00% -zi-load-plugin\n-----------------------------------------------------------------------------------\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"the first column is the time is in milliseconds;"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"It denotes the amount of time spent in a function in total."),(0,a.kt)("li",{parentName:"ul"},"For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"--zi-shadow-autoload")," consumed 10.71 ms of the execution time,"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"the fourth column is also a time in milliseconds, but it denotes the amount of time spent on executing only of function's ",(0,a.kt)("strong",{parentName:"p"},"own code"),", it doesn't count the time spent in ",(0,a.kt)("strong",{parentName:"p"},"descendant functions")," that are called from the function;"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"--zi-shadow-autoload")," spent 8.71 ms on executing only its own code."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"the table is sorted on the ",(0,a.kt)("strong",{parentName:"p"},"self-time")," column."))),(0,a.kt)("h2",{id:"profile-zshrc-startup"},"Profile ",(0,a.kt)("inlineCode",{parentName:"h2"},".zshrc")," startup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title=~/.zshrc",title:"~/.zshrc"},"# Specify true to enable\nPROFILE_STARTUP=false\n\n# Place at the top of .zshrc\nif [[ \"$PROFILE_STARTUP\" == true ]]; then\n  zmodload zsh/zprof\n  # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html\n  PS4=$'%D{%M%S%.} %N:%i> '\n  exec 3>&2 2>$HOME/startlog.$$\n  setopt xtrace prompt_subst\nfi\n\n# ... ...\n# ...\n# Here is your .zshrc content.\n# ...\n# ... ...\n\n# Place at the bottom of .zshrc\nif [[ \"$PROFILE_STARTUP\" == true ]]; then\n  unsetopt xtrace\n  exec 2>&3 3>&-\n  zprof > ~/zshprofile$(date +'%s')\nfi\n")),(0,a.kt)("p",null,"The next time your ",(0,a.kt)("inlineCode",{parentName:"p"},".zshrc")," is sourced it will generate 2 files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"$HOME")," directory."))}d.isMDXComponent=!0}}]);